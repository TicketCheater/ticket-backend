# front-tier는 프론트엔드 서비스가 연결되는 네트워크이다.
# 이 네트워크는 웹 브라우저와 상호작용하는 서비스들이 포함된다.
# 예를 들어, Grafana 같은 시각화 도구가 여기에 속할 수 있다.
# back-tier는 백엔드 서비스가 연결되는 네트워크이다.
# 이 네트워크는 데이터베이스, API 서버, 백엔드 애플리케이션 등의 서비스들이 포함된다.
# front-tier와 격리되어 있어 보안과 성능을 높일 수 있다.
# bridge는 Docker의 기본 네트워크 드라이버 중 하나로,
# 컨테이너들이 서로 통신할 수 있게 해준다.
# 브리지 네트워크는 호스트 시스템의 네트워크와는 분리되어 있다.

version: '3' # 사용할 Docker Compose 파일의 버전이다.

networks:
  front-tier: # 프론트엔드 서비스가 연결될 네트워크이다.
  back-tier: # 백엔드 서비스가 연결될 네트워크이다.
    driver: bridge # 브리지 네트워크 드라이버를 사용한다.

services:
  web-redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes # Redis 서버를 append-only 모드로 실행한다.

  flow-redis:
    image: redis:latest
    ports:
      - "6380:6379"
    volumes:
      - redis-data2:/data
    command: redis-server --appendonly yes # Redis 서버를 append-only 모드로 실행한다.

  zipkin:
    image: ghcr.io/openzipkin/zipkin-slim:${TAG:-latest}
    container_name: zipkin
    environment:
      - STORAGE_TYPE=mem
    ports:
      - "9411:9411"

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command: # Prometheus 서버를 설정 파일과 데이터 저장소 경로를 지정하여 실행한다.
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    links:
      - cadvisor:cadvisor
      - alertmanager:alertmanager
    depends_on:
      - cadvisor
    networks:
      - back-tier
    restart: always

  alertmanager:
    image: prom/alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    networks:
      - back-tier
    restart: always
    command: # Alertmanager를 설정 파일과 데이터 저장소 경로를 지정하여 실행한다.
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'

  node-exporter:
    image: quay.io/prometheus/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /:/host:ro,rslave
    command: # Node Exporter를 호스트의 파일 시스템과 함께 실행하여 시스템 메트릭을 수집한다.
      - '--path.rootfs=/host'
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points'
      - '^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - back-tier
    restart: always
    deploy: # 글로벌 모드로 모든 노드에서 Node Exporter를 실행한다.
      mode: global

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.45.0
    container_name: cadvisor
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/machine-id:/etc/machine-id:ro
      - /var/lib/dbus/machine-id:/var/lib/dbus/machine-id:ro
    restart: unless-stopped
    expose:
      - 8080
    networks:
      - back-tier
    labels:
      org.label-schema.group: "monitoring"

  grafana:
    image: grafana/grafana
    user: "472"
    depends_on:
      - prometheus
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    networks:
      - back-tier
      - front-tier
    restart: always

volumes:
  redis-data:
  redis-data2:
  prometheus_data:
  grafana_data:
